 getAnswers() {
    return new Promise((resolve, reject) => {
      this.classService.getAnswers()
        .subscribe(resp => {
          this.anwsers = { ...resp.body };
          resolve();
        }, err => reject(err));
    });

  }
  
  // the use
  
  async ngOnInit(): void {
  // wait for promise finish (synchonous)
    await this.getAllImages();
    await this.getAnswers();
    // or using Promise.all. It'll wait for all promises are resolved
    await Promise.all([this.getAllImages(), this.getAnswers()]);
    this.answerIndex = this.getIndexOfList(this.anwsers, this.images[this.imageIndex]);
    this.defaultQuestion = this.answerIndex !== -1 ? this.anwsers[this.answerIndex].question : this.defaultQuestion;
  }
  
  The Promise.all() method returns a single Promise that resolves when all of the promises passed as an iterable have 
  resolved or when the iterable contains no promises. 
  It rejects with the reason of the first promise that rejects.
  
  The promise.all() function resolves when all the promises inside the iterable have been resolved and then returns the result.
